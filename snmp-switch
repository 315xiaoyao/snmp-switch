#!/usr/bin/env python3

# Copyright 2013 Mike Sampson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import datetime
import argparse
import socket
from os.path import expanduser, isfile
from collections import defaultdict
from pysnmp.smi import builder
from pysnmp.smi.error import SmiError
from pysnmp.entity.rfc3413.oneliner import cmdgen

class SnmpError(Exception): pass

def parse_args():
    parser = argparse.ArgumentParser(description =
             'query a network switch using snmp.')
    parser.add_argument('host', help = 'host to query.')
    parser.add_argument('-c', '--config', default = expanduser('~/.snmp-switch.conf'),
        help = 'location of config file.')

    return parser.parse_args()

def snmp_get(host, *args):
    errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
        cmdgen.CommunityData('public'),
        cmdgen.UdpTransportTarget((host, 161)),
        *args, lookupNames = True, lookupValues = True
    )

    if errorIndication:
        raise SnmpError(errorIndication)

    if errorStatus:
        raise SnmpError('%s at %s' % (
            errorStatus.prettyPrint(),
            errorIndex and varBinds[int(errorIndex)-1] or '?'
            )
        )

    return [x[1].prettyPrint() for x in varBinds]

def snmp_get_next(host, *args):
    errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.nextCmd(
        cmdgen.CommunityData('public'),
        cmdgen.UdpTransportTarget((host, 161)),
        *args, lookupNames = True, lookupValues = True
    )

    if errorIndication:
        raise SnmpError(errorIndication)

    if errorStatus:
        raise SnmpError('%s at %s' % (
            errorStatus.prettyPrint(),
            errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
            )
        )

    rows = []

    for varBindTableRow in varBindTable:
        row = []
        for name, val in varBindTableRow:
            row.append(val.prettyPrint())
        rows.append(row)

    return rows

def output_columns(rows, headers):
    "Prefix header with a '-' for left alignment."
    col_alignments = [-1 if x.startswith('-') else 1 for x in headers]
    headers = [h.strip('-') for h in headers]

    cols = zip(*([headers] + rows))
    col_widths = [ max(len(value) for value in col) for col in cols ]
    col_widths = [x[0] * x[1] for x in zip(col_widths, col_alignments)]

    fmt = '  '.join(['%%%ds' % width for width in col_widths ])
    if headers:
        h = fmt % tuple(headers)
        print('%s\n%s' % (h, '-' * len(h)))
    for row in rows:
          print(fmt % tuple(row))

def si_num(x, dp = 0):
    SI = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    x = int(x)
    p = 0
    while x >= 1000:
        x /= 1000
        p += 1

    fmt_str = '%%.%df%%s' % dp
    return fmt_str % (x, SI[p])

def get_interface_stats(host):
    try:
        ports = snmp_get_next(host,
            cmdgen.MibVariable('IF-MIB', 'ifDescr'),
            cmdgen.MibVariable('IF-MIB', 'ifOperStatus'),
            cmdgen.MibVariable('IF-MIB', 'ifSpeed'),
            cmdgen.MibVariable('IF-MIB', 'ifHCInOctets'),
            cmdgen.MibVariable('IF-MIB', 'ifHCOutOctets'))
        counter = 64
    except SmiError:
        ports = snmp_get_next(host,
            cmdgen.MibVariable('IF-MIB', 'ifDescr'),
            cmdgen.MibVariable('IF-MIB', 'ifOperStatus'),
            cmdgen.MibVariable('IF-MIB', 'ifSpeed'),
            cmdgen.MibVariable('IF-MIB', 'ifInOctets'),
            cmdgen.MibVariable('IF-MIB', 'ifOutOctets'))
        counter = 32

    return (ports, counter)

def get_macs(host):
    mac_port = snmp_get_next(host,
        cmdgen.MibVariable('BRIDGE-MIB', 'dot1dTpFdbAddress'),
        cmdgen.MibVariable('BRIDGE-MIB', 'dot1dTpFdbPort'))

    mac_table = load_mac_table()
    macs = defaultdict(list)
    for m in mac_port:
        idx = int(m[1]) - 1
        host = m[0]
        if host in mac_table:
            host = mac_table[host]
        macs[idx] += [host]

    return macs

def load_mac_table():
    macs = dict()
    if isfile(args.config):
        for line in open(args.config).readlines():
            key, value = line.split()
            macs[key] = value
    return macs

def main(host):
    try:
        info = snmp_get(host,
            cmdgen.MibVariable('SNMPv2-MIB', 'sysName', 0),
            cmdgen.MibVariable('SNMPv2-MIB', 'sysDescr', 0),
            cmdgen.MibVariable('SNMPv2-MIB', 'sysUpTime', 0))

        ports, counter = get_interface_stats(host)

        macs = get_macs(host)

    except Exception as e:
        print('ERROR: ' + str(e))
        sys.exit(1)

    print('Name        : %s' % info[0])
    print('Description : %s' % info[1])
    print('Uptime      : %s\n' % str(datetime.timedelta(seconds = int(info[2]) / 100)))

    ports = [[y.strip('\'\"') for y in x] for x in ports ]

    ports = [[x[0], x[1], si_num(x[2]), si_num(x[3], 2), si_num(x[4], 2), ' '.join(macs[i])] for i,x in enumerate(ports)]

    output_columns(ports, headers = ['-Description', '-Status', 'Speed', 'Octs In (%d)' % counter, 'Octs Out (%d)' % counter, '-Hosts'])

args = parse_args()

try:
    socket.gethostbyname(args.host)
except:
    print('Unknown host:', args.host)
    sys.exit(1)

cmdGen = cmdgen.CommandGenerator()

if __name__ == '__main__':
    main(args.host)

