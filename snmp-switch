#!/usr/bin/env python3

# Copyright 2013 Mike Sampson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import io
import sys
import datetime
import argparse
import socket
from os.path import expanduser, isfile
from collections import defaultdict
from pysnmp.smi import builder
from pysnmp.smi.error import SmiError
from pysnmp.entity.rfc3413.oneliner import cmdgen

class SnmpError(Exception): pass

######## General helper functions ########


def si_num(x, dp = 0):
    "Return x as a string using SI prefix and dp decimal places."
    SI = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    p = 0
    while x >= 1000:
        x /= 1000
        p += 1

    fmt_str = '%%.%df%%s' % dp
    return fmt_str % (x, SI[p])


def int_str(x):
    "Return value as an int if possible, otherwise a string minus any quotes."
    try:
        return int(x)
    except ValueError:
        return x.strip('\'\"')


def output_columns(rows, headers):
    "Prefix header with a '-' for left alignment."
    col_alignments = [-1 if x.startswith('-') else 1 for x in headers]
    headers = [h.strip('-') for h in headers]

    cols = zip(*([headers] + rows))
    col_widths = [ max(len(value) for value in col) for col in cols ]
    col_widths = [x[0] * x[1] for x in zip(col_widths, col_alignments)]

    fmt = '  '.join(['%%%ds' % width for width in col_widths ])
    h = fmt % tuple(headers)
    print('%s\n%s' % (h, '-' * len(h)))
    for row in rows:
          print(fmt % tuple(row))


######## SNMP helper functions  ########


def snmp_get(host, *args):
    "Perform an SNMP GET for one or more OIDs. Return results as a list."
    errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
        cmdgen.CommunityData('public'),
        cmdgen.UdpTransportTarget((host, 161)),
        *args, lookupNames = True, lookupValues = True
    )

    if errorIndication:
        raise SnmpError(errorIndication)

    if errorStatus:
        raise SnmpError('%s at %s' % (
            errorStatus.prettyPrint(),
            errorIndex and varBinds[int(errorIndex)-1] or '?'
            )
        )

    return [x[1].prettyPrint() for x in varBinds]


def snmp_get_next(host, *args):
    "Perform an SNMP GETNEXT for one or more OIDs. Return results as a list of lists."
    errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.nextCmd(
        cmdgen.CommunityData('public'),
        cmdgen.UdpTransportTarget((host, 161)),
        *args, lookupNames = True, lookupValues = True
    )

    if errorIndication:
        raise SnmpError(errorIndication)

    if errorStatus:
        raise SnmpError('%s at %s' % (
            errorStatus.prettyPrint(),
            errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
            )
        )

    rows = []

    for varBindTableRow in varBindTable:
        row = []
        for name, val in varBindTableRow:
            row.append(int_str(val.prettyPrint()))
        rows.append(row)

    return rows


def mib_vars(mib, oids, indices = None):
    "Return a list of MibVariables given a space separated list of names."
    if indices is None:
        return [cmdgen.MibVariable(mib, x)  for x in oids.split()]
    else:
        return [cmdgen.MibVariable(mib, x, indices)  for x in oids.split()]


######## General switch information ########


def switch_information(host):
    oids = mib_vars('SNMPv2-MIB', 'sysName sysLocation sysDescr sysUpTime', 0)
    info = snmp_get(host, *oids)
    print('Name        : %s' % info[0])
    print('Location    : %s' % info[1])
    print('Description : %s' % info[2])
    print('Uptime      : %s\n' % str(datetime.timedelta(seconds = int(info[3]) / 100)))


######## Interface information ########


def get_interface_stats(host):
    try:
        oids_64 = mib_vars('IF-MIB', 'ifName ifOperStatus ifSpeed ifHCInOctets ifHCOutOctets')
        ports = snmp_get_next(host, *oids_64)
        counter = 64
    except SmiError:
        oids_32 = mib_vars('IF-MIB', 'ifName ifOperStatus ifSpeed ifInOctets ifOutOctets')
        ports = snmp_get_next(host, *oids_32)
        counter = 32

    return (ports, counter)


def get_macs(host):
    oids = mib_vars('BRIDGE-MIB', 'dot1dTpFdbAddress dot1dTpFdbPort')
    mac_port = snmp_get_next(host, *oids)

    mac_table = load_mac_table()
    macs = defaultdict(list)
    for m in mac_port:
        idx = int(m[1]) - 1
        host = m[0]
        if host in mac_table:
            host = mac_table[host]
        macs[idx] += [host]

    return macs


def load_mac_table():
    macs = dict()
    if isfile(args.config):
        for line in open(args.config).readlines():
            key, value = line.split()
            macs[key] = value
    return macs


def switch_port_information(host):
    ports, counter = get_interface_stats(host)
    macs = get_macs(host)

    ports = [[x[0], x[1], si_num(x[2]), si_num(x[3], 2), si_num(x[4], 2), ' '.join(macs[i])] for i,x in enumerate(ports)]

    output_columns(ports, headers = ['-Name', '-Status', 'Speed', 'Octs In (%d)' % counter, 'Octs Out (%d)' % counter, '-Hosts'])


######## VLAN information ########


def vlan_entry(vlan_ports, num_ports):
    "convert [1 default 0xffffffc0 0xffffffc0] to 1 default n x U/T/E "
    # this is ugly, has to be a better way.
    # will probably break on >32 port switches.
    tagged = bin(int(vlan_ports[2], 0))[2:].zfill(32)
    untagged = bin(int(vlan_ports[3], 0))[2:].zfill(32)

    p = []
    for x in range(num_ports):
        if untagged[x] == '1':
            p.append('U')
        elif tagged[x] == '1':
            p.append('T')
        else:
            p.append('E')

    return [str(vlan_ports[0]), vlan_ports[1]] + p


def get_vlan_info(host):
    oids = mib_vars('Q-BRIDGE-MIB', 'dot1qMaxSupportedVlans dot1qNumVlans', 0)
    info = snmp_get(host, *oids)
    return info


def get_vlan_ports(host):
    num_ports = len(snmp_get_next(host, cmdgen.MibVariable('Q-BRIDGE-MIB', 'dot1qPvid')))

    oids = mib_vars('Q-BRIDGE-MIB', 'dot1qVlanFdbId  dot1qVlanStaticName dot1qVlanStaticEgressPorts dot1qVlanStaticUntaggedPorts')
    ports = snmp_get_next(host, *oids)
    return (ports, num_ports)


def switch_vlan_information(host):
    vlan_info = get_vlan_info(host)
    vlan_ports, num_ports = get_vlan_ports(host)
    KEY = 'Key : T - Tagged, U - Untagged, E - Excluded'

    print('\nMax VLANs : %s    VLANs : %s    %s\n' % tuple(vlan_info + [KEY]))

    vlan_ports = [vlan_entry(x, num_ports) for x in vlan_ports]
    output_columns(vlan_ports, headers = ['-ID', '-Name'] + [str(x) for x in range(1, 27)])


######## Application ########


def parse_args():
    parser = argparse.ArgumentParser(description =
             'query a network switch using snmp.')
    parser.add_argument('host', help = 'host to query.')
    parser.add_argument('-c', '--config', default = expanduser('~/.snmp-switch.conf'),
        help = 'location of config file.')

    return parser.parse_args()

def main(host):
    stdout = sys.stdout
    sys.stdout = output = io.StringIO()

    try:
        switch_information(host)
        switch_port_information(host)
        switch_vlan_information(host)

    except Exception as e:
        print('ERROR: ' + str(e))
        sys.exit(1)

    sys.stdout = stdout
    print(output.getvalue())
    output.close()

args = parse_args()

try:
    socket.gethostbyname(args.host)
except:
    print('Unknown host:', args.host)
    sys.exit(1)

cmdGen = cmdgen.CommandGenerator()

if __name__ == '__main__':
    main(args.host)

